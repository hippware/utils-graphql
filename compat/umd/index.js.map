{"version":3,"file":"index.js","sources":["../../src/errorsToString.js","../../src/getOperationType.js","../../src/hasSubscription.js","../../src/requestFromCompat.js","../../src/requestToCompat.js","../../src/index.js"],"sourcesContent":["const locationsToString = locations =>\n  locations.map(({column, line}) => `${line}:${column}`).join(\"; \");\n\nconst errorToString = ({message, locations}) =>\n  message + (locations ? ` (${locationsToString(locations)})` : \"\");\n\n/**\n * Transforms an array of GqlError into a string.\n *\n * @example\n *\n * const gqlRespose = {\n *   errors: [\n *     {message: \"First Error\", locations: [{column: 10, line: 2}]},\n *     {message: \"Second Error\", locations: [{column: 2, line: 4}]}\n *   ]\n * }\n *\n * const error = errorsToString(gqlRespose.errors);\n * // string with the following:\n * // First Error (2:10)\n * // Second Error (4:2)\n */\nconst errorsToString = gqlErrors =>\n  gqlErrors.map(errorToString).join(\"\\n\");\n\nexport default errorsToString;\n","const operationTypeRe = /^\\s*(query|mutation|subscription|\\{)/;\n\nconst getOperationTypeFromMatched = matched  =>\n  matched === \"{\" ? \"query\" : matched;\n\n/**\n * Returns the type (query, mutation, or subscription) of the given operation\n *\n * @example\n *\n * const operation = `\n *   subscription userSubscription($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       name\n *     }\n *   }\n * `;\n *\n * const operationType = getOperationType(operation);\n *\n * console.log(operationType); // \"subscription\"\n */\nconst getOperationType = operation => {\n  const result = operation.match(operationTypeRe);\n\n  if (!result) {\n    throw new TypeError(`Invalid operation:\\n${operation}`);\n  }\n\n  return getOperationTypeFromMatched(result[1]);\n};\n\nexport default getOperationType;\n","\nconst isSubscription = definition =>\n  definition.kind === \"OperationDefinition\" &&\n  definition.operation === \"subscription\";\n\n/**\n * Returns true if documentNode has a subscription or false otherwise\n */\nconst hasSubscription = documentNode  =>\n  documentNode.definitions.some(isSubscription);\n\nexport default hasSubscription;\n","/**\n * Creates a GqlRequest using given GqlRequestCompat\n *\n * @param {GqlRequestCompat<Variables>} gqlRequestCompat\n *\n * @return {GqlRequest<Variables>} \n *\n * @example\n * const query = `\n *   query userQuery($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       email\n *     }\n *   }\n * `;\n * \n * console.log(requestFromCompat({query, variables: {userId: 10}}));\n * // {operation: \"...\", variables: {userId: 10}}\n */\nconst requestFromCompat = ({\n  query: operation,\n  variables\n}) =>\n  variables ? {operation, variables} : {operation};\n\nexport default requestFromCompat;\n","\n/**\n * Creates a GqlRequest using given GqlRequestCompat\n *\n * @param {GqlRequest<Variables>} gqlRequest\n *\n * @return {GqlRequestCompat<Variables>}\n * \n * @example\n * const operation = `\n *   query userQuery($userId: ID!) {\n *     user(userId: $userId) {\n *       id\n *       email\n *     }\n *   }\n * `;\n * \n * console.log(requestToCompat({operation, variables: {userId: 10}}));\n * // {query: \"...\", variables: {userId: 10}}\n */\nconst requestToCompat = ({\n  operation: query,\n  variables\n}) =>\n  variables ? {query, variables} : {query};\n\nexport default requestToCompat;\n","// @flow\n\nexport {default as errorsToString} from \"./errorsToString\";\nexport {default as getOperationType} from \"./getOperationType\";\nexport {default as hasSubscription} from \"./hasSubscription\";\nexport {default as requestFromCompat} from \"./requestFromCompat\";\nexport {default as requestToCompat} from \"./requestToCompat\";\n\n"],"names":["locationsToString","locations","map","column","line","join","errorToString","message","errorsToString","gqlErrors","operationTypeRe","getOperationTypeFromMatched","matched","getOperationType","operation","result","match","TypeError","isSubscription","definition","kind","hasSubscription","documentNode","definitions","some","requestFromCompat","query","variables","requestToCompat"],"mappings":";;;;;;EAAA,MAAMA,iBAAiB,GAAGC,SAAS,IACjCA,SAAS,CAACC,GAAV,CAAc,CAAC;EAACC,EAAAA,MAAD;EAASC,EAAAA;EAAT,CAAD,KAAqB,GAAEA,IAAK,IAAGD,MAAO,EAApD,EAAuDE,IAAvD,CAA4D,IAA5D,CADF;;EAGA,MAAMC,aAAa,GAAG,CAAC;EAACC,EAAAA,OAAD;EAAUN,EAAAA;EAAV,CAAD,KACpBM,OAAO,IAAIN,SAAS,GAAI,KAAID,iBAAiB,CAACC,SAAD,CAAY,GAArC,GAA0C,EAAvD,CADT;EAGA;;;;;;;;;;;;;;;;;;;EAiBA,MAAMO,cAAc,GAAGC,SAAS,IAC9BA,SAAS,CAACP,GAAV,CAAcI,aAAd,EAA6BD,IAA7B,CAAkC,IAAlC,CADF;;ECvBA,MAAMK,eAAe,GAAG,sCAAxB;;EAEA,MAAMC,2BAA2B,GAAGC,OAAO,IACzCA,OAAO,KAAK,GAAZ,GAAkB,OAAlB,GAA4BA,OAD9B;EAGA;;;;;;;;;;;;;;;;;;;;EAkBA,MAAMC,gBAAgB,GAAGC,SAAS,IAAI;EACpC,QAAMC,MAAM,GAAGD,SAAS,CAACE,KAAV,CAAgBN,eAAhB,CAAf;;EAEA,MAAI,CAACK,MAAL,EAAa;EACX,UAAM,IAAIE,SAAJ,CAAe,uBAAsBH,SAAU,EAA/C,CAAN;EACD;;EAED,SAAOH,2BAA2B,CAACI,MAAM,CAAC,CAAD,CAAP,CAAlC;EACD,CARD;;ECtBA,MAAMG,cAAc,GAAGC,UAAU,IAC/BA,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACL,SAAX,KAAyB,cAF3B;EAIA;;;;;EAGA,MAAMO,eAAe,GAAGC,YAAY,IAClCA,YAAY,CAACC,WAAb,CAAyBC,IAAzB,CAA8BN,cAA9B,CADF;;ECRA;;;;;;;;;;;;;;;;;;;;EAoBA,MAAMO,iBAAiB,GAAG,CAAC;EACzBC,EAAAA,KAAK,EAAEZ,SADkB;EAEzBa,EAAAA;EAFyB,CAAD,KAIxBA,SAAS,GAAG;EAACb,EAAAA,SAAD;EAAYa,EAAAA;EAAZ,CAAH,GAA4B;EAACb,EAAAA;EAAD,CAJvC;;ECnBA;;;;;;;;;;;;;;;;;;;;EAoBA,MAAMc,eAAe,GAAG,CAAC;EACvBd,EAAAA,SAAS,EAAEY,KADY;EAEvBC,EAAAA;EAFuB,CAAD,KAItBA,SAAS,GAAG;EAACD,EAAAA,KAAD;EAAQC,EAAAA;EAAR,CAAH,GAAwB;EAACD,EAAAA;EAAD,CAJnC;;ECrBA;;;;;;;;;;;;;;;;"}